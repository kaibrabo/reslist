{"version":3,"sources":["components/login.js","firebase.js","components/App.js","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","className","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","reservations","newReservation","id","name","phone","numGuests","isSeated","_this2","database","ref","on","res","val","newState","push","setState","e","nameVal","phoneVal","guestsVal","numGuestsVal","document","getElementById","value","Number","itemId","item","resRef","concat","set","reservationsRef","preventDefault","alert","newRes","resId","remove","_this3","components_login","onSubmit","handleSubmit","class","type","placeholder","onChange","handleChange","maxLength","min","map","key","checked","toggleComplete","onClick","removeReservation","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a59fc43.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './login.css';\n\nclass Login extends Component {\n    render() {\n        return (\n            <div className=\"login-container\">\n            </div>\n        );\n    }\n}\n\n\nexport default Login;","import firebase from 'firebase';\n// Initialize Firebase\nconst config = {\n    apiKey: \"AIzaSyB04KT9sI2oo9qYiqw5iEi_m28Yyw_Equ0\",\n    authDomain: \"reslist-1550356432564.firebaseapp.com\",\n    databaseURL: \"https://reslist-1550356432564.firebaseio.com\",\n    projectId: \"reslist-1550356432564\",\n    storageBucket: \"\",\n    messagingSenderId: \"754507815433\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { Component } from 'react';\nimport Login from './login';\n// import ListItem from './list-item';\nimport firebase from '../firebase'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      reservations: [],\n      \n      newReservation: {\n        id: '',\n        name: '',\n        phone: '',\n        numGuests: 1,\n        isSeated: false\n      }\n    };\n  }\n  \n  componentDidMount() {\n    // initialize firebase DB\n    const reservationsRef = firebase.database().ref('reservations');\n    \n    // GET reservations data from DB\n    reservationsRef.on('value', res => {\n      let reservations = res.val();\n      let newState = [];\n      \n      // loops and sets each object,\n      // then pushes each object into [newState]\n      for (let res in reservations) {\n        newState.push({\n          id: res,\n          name: reservations[res].name,\n          phone: reservations[res].phone,\n          numGuests: reservations[res].numGuests,\n          isSeated: reservations[res].isSeated\n        });\n      }\n      \n      // sets state to display data\n      this.setState({ reservations: newState });\n    });\n\n  }\n  \n  handleChange(e) {\n    let nameVal, phoneVal, guestsVal, numGuestsVal;\n    \n    // sets input values\n    nameVal = document.getElementById(\"name\").value;\n    phoneVal = document.getElementById(\"phone\").value;\n    guestsVal = document.getElementById(\"numGuests\").value;\n    \n    // converts str to int\n    numGuestsVal = Number(guestsVal);\n    \n    // sets newReservation values\n    this.setState({ newReservation: {\n                    name: nameVal,\n                    phone: phoneVal,\n                    numGuests: numGuestsVal,\n                    isSeated: false\n                  }\n    });\n  }\n  \n  toggleComplete(itemId, item) {\n    // GET reservation object\n    const resRef = firebase.database().ref(`/reservations/${itemId}/isSeated`);\n\n    // checks bool and sets inverse value\n    // if false, set true / if true, set false\n    if (!item.isSeated) {\n      resRef.set(true);\n    } else {\n      resRef.set(false);\n    }\n  }\n  \n  handleSubmit(e) {\n    // initialize firebase DB\n    const reservationsRef = firebase.database().ref('reservations');\n    \n    // blocks page reload\n    e.preventDefault();\n    \n    // checks for new values\n    if (!this.state.newReservation.name || !this.state.newReservation.phone){\n      return alert(\"a NAME or PHONE number is required\");\n    }\n    \n    // capture input values\n    const newRes = {\n      name: this.state.newReservation.name,\n      phone: this.state.newReservation.phone,\n      numGuests: this.state.newReservation.numGuests,\n      isSeated: this.state.newReservation.isSeated\n    };\n    \n    // pushes newRes to firebase DB\n    reservationsRef.push(newRes);\n    \n    // clears input after submit\n    this.state.newReservation.name = '';\n    this.state.newReservation.phone = '';\n    this.state.newReservation.numGuests = 1;\n  }\n  \n  removeReservation(resId) {\n    const resRef = firebase.database().ref(`/reservations/${resId}`);\n    resRef.remove();\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n  \n        <div className=\"navbar\">\n          <h1>res<span>list</span></h1>\n          <Login />\n        </div>\n  \n        {/* Reservation Input Form */}\n        <div className=\"add-reservation\">\n          <h2>Add Reservation</h2>\n          <form onSubmit={e => {this.handleSubmit(e)}} className=\"res-form\">\n            <table>\n              <tbody>\n                <tr>\n                  <td class=\"res-form-label\">name:</td>\n                  <td>\n                    <div>\n                      <input type=\"text\" \n                             placeholder=\" name\"\n                             id=\"name\"\n                             value={this.state.newReservation.name}\n                             onChange={e => this.handleChange(e)}/>\n                    </div>\n                  </td>\n                </tr>\n    \n                <tr>\n                  <td class=\"res-form-label\">phone:</td>\n                  <td>\n                    <div>\n                      <input type=\"tel\" \n                             placeholder=\" phone\"\n                             id=\"phone\"\n                             maxLength=\"10\"\n                             value={this.state.newReservation.phone}\n                             onChange={e => this.handleChange(e)}/>\n                    </div>\n                  </td>\n                </tr>\n                \n                <tr>\n                  <td class=\"res-form-label\">guests:</td>\n                  <td>\n                    <div>\n                      <input type=\"number\" // Only allows integers for input\n                             placeholder=\" # of guests\"\n                             id=\"numGuests\"\n                             min=\"1\"\n                             value={this.state.newReservation.numGuests}\n                             onChange={e => this.handleChange(e)}/>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <input type=\"submit\" />\n          </form>\n        </div>\n        {/* Display Reservation List */}\n        <div className=\"res-list\">\n        <h2>Reservations</h2>\n          <ol>\n            {this.state.reservations.map((item) => {\n                return <li key={item.id} className=\"list-item\">\n                \n                    <table>\n                      <tbody>\n                        <tr>\n                          <td>name:</td>\n                          <td>{item.name}</td>\n                          <td>seated:</td>\n                          <td>\n                            <input type=\"checkbox\" \n                            checked={item.isSeated}\n                            onChange={() => this.toggleComplete(item.id, item)}/>\n                          </td>\n                        </tr>\n                        \n                        <tr>\n                          <td>phone:</td>\n                          <td>{item.phone}</td>                          \n                          <td>guests:</td>\n                          <td>{item.numGuests}</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    <div class=\"remove-btn-container\">\n                      <button \n                      className=\"remove-btn\"\n                      onClick={() => this.removeReservation(item.id)}>Remove</button>\n                    </div>\n                </li>;\n            })}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}